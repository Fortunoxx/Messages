using Scalar.AspNetCore;
using Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();
// Example in Program.cs
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddScoped<IApplicationDbContext>(provider => provider.GetRequiredService<ApplicationDbContext>());

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
    app.UseSwaggerUI(options =>
    {
        options.SwaggerEndpoint("/openapi/v1.json", "Messages API V1");
    });
    app.MapScalarApiReference(options =>
    {
        options.
            WithTitle("Messages API").
            WithTheme(ScalarTheme.Solarized).
            WithDefaultHttpClient(ScalarTarget.PowerShell, ScalarClient.Curl);
    });
}

app.UseHttpsRedirection();

app.MapGet("/messages/outbox/{sender:int}", async (int sender, [FromServices] ApplicationDbContext context) =>
{
    var messages = await context.Messages.
        AsNoTracking().
        Where(m => m.Sender == sender).
        Select(m => new MessageDto(m.Sender, m.Receiver, m.Title, m.Content, m.MessageIdRef, m.SentAt, m.IsRead,
            m.Attachments.Select(a => new AttachmentLightDto(a.Id, a.MessageId, a.FileName, a.ContentType, a.Size)))
        ).
        ToListAsync();

    return messages;
})
.WithName("GetMessagesOutbox");

app.MapGet("/messages/inbox/{receiver:int}", async (int receiver, [FromServices] ApplicationDbContext context) =>
{
    var messages = await context.Messages.
        AsNoTracking().
        Where(m => m.Receiver == receiver).
        Select(m => new MessageDto(m.Sender, m.Receiver, m.Title, m.Content, m.MessageIdRef, m.SentAt, m.IsRead,
            m.Attachments.Select(a => new AttachmentLightDto(a.Id, a.MessageId, a.FileName, a.ContentType, a.Size)))
        ).
        ToListAsync();

    return messages;
})
.WithName("GetMessagesInbox");

app.MapGet("messages/{messageId:int}", async (int messageId, [FromServices] ApplicationDbContext context) =>
{
    var message = await context.Messages.FindAsync(messageId);

    if (message == null)
    {
        return Results.NotFound();
    }

    return Results.Ok(message);
})
.WithName("GetMessageDetails");

// TODO: instead of using a bool, use a datetime to set the date of the read status
app.MapPatch("messages/{messageId:int}/{isRead:bool}", async (int messageId, bool isRead, [FromServices] ApplicationDbContext context) =>
{
    // Update the message with the new values
    var message = await context.Messages.FindAsync(messageId);

    if (message == null)
    {
        return Results.NotFound();
    }

    message.IsRead = isRead;

    // Save the changes to the database or any other storage
    await context.SaveChangesAsync();

    return Results.NoContent();
})
.WithName("PatchMessageReadStatus");

app.MapPost("messages", async (MessageInsertDto message, [FromServices] ApplicationDbContext context) =>
{
    // create a new message
    var createMessage = new Message
    {
        Attachments = [],
        Content = message.Content,
        MessageIdRef = message.MessageIdRef,
        Receiver = message.Receiver,
        Sender = message.Sender,
        Title = message.Title,
    };

    // validate messageIdRef here
    var parentMessage = await context.Messages.FindAsync(message.MessageIdRef);
    if (message.MessageIdRef != null && parentMessage == null)
    {
        return Results.BadRequest("Invalid MessageIdRef");
    }

    context.Messages.Add(createMessage);
    await context.SaveChangesAsync();

    return Results.CreatedAtRoute("GetMessageDetails", new { messageId = createMessage.Id, }, new MessageDto(
        Sender: createMessage.Sender,
        Receiver: createMessage.Receiver,
        Title: createMessage.Title,
        Content: createMessage.Content,
        MessageIdRef: createMessage.MessageIdRef,
        SentAt: createMessage.SentAt,
        IsRead: createMessage.IsRead,
        Attachments: []
    ));
});

app.MapPost("messages/{messageId:int}/attachment", async (int messageId, [FromBody] AttachmentInsertDto attachment, [FromServices] ApplicationDbContext context) =>
{
    // create an attachment for the message with the given messageId
    var message = await context.Messages.FindAsync(messageId);

    if (message == null)
    {
        return Results.NotFound();
    }

    var createAttachment = new Attachment(
        Id: 0, // Assuming Id is auto-generated by the database
        MessageId: messageId,
        FileName: attachment.FileName,
        ContentType: attachment.ContentType,
        Size: attachment.Data.Length,
        Data: attachment.Data
    );

    context.Attachments.Add(createAttachment);
    await context.SaveChangesAsync();

    return Results.CreatedAtRoute("GetMessageAttachmentDetails", new { attachmentId = createAttachment.Id, }, new AttachmentDto(
        Id: 1,
        MessageId: messageId,
        FileName: attachment.FileName,
        ContentType: attachment.ContentType,
        Size: attachment.Data.Length,
        Data: attachment.Data
    ));
})
.WithName("PostMessageAttachments");

app.MapGet("attachments/{attachmentId:int}", async (int attachmentId, [FromServices] ApplicationDbContext context) =>
{
    var attachment = await context.Attachments.FindAsync(attachmentId);
    return attachment;
})
.WithName("GetMessageAttachmentDetails");

app.MapGet("messages/{messageId:int}/thread", async (int messageId, [FromServices] ApplicationDbContext context) =>
{
    var relatedMessages = await context.Messages
        .FromSqlRaw(@"
            WITH MessageThread AS (
                SELECT * FROM Messages WHERE Id = {0}
                UNION ALL
                SELECT m.* FROM Messages m
                INNER JOIN MessageThread mt ON m.MessageIdRef = mt.Id
            )
            SELECT * FROM MessageThread
        ", messageId)
        .ToListAsync();

    return relatedMessages;
})
.WithName("GetMessageThread");

// TODO: implement a delete endpoint for messages for the sender and receiver

app.Run();


record MessageInsertDto(int Sender, int Receiver, string Title, string Content, int? MessageIdRef) { }

record MessageDto(int Sender, int Receiver, string Title, string Content, int? MessageIdRef, DateTime SentAt, bool IsRead, IEnumerable<AttachmentLightDto> Attachments) { }

record AttachmentDto(int Id, int MessageId, string FileName, string ContentType, long Size, byte[] Data) : AttachmentLightDto(Id, MessageId, FileName, ContentType, Size) { }

record AttachmentLightDto(int Id, int MessageId, string FileName, string ContentType, long Size)
{
    public DateTime CreatedAt { get; init; } = DateTime.UtcNow;
}

record AttachmentInsertDto(string FileName, string ContentType, byte[] Data) { }